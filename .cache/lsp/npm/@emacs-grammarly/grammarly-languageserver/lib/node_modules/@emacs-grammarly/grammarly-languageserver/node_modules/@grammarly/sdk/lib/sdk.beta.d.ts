/**
 * @license
 * (c) Copyright 2023 Grammarly, Inc.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @public
 */
declare type AttributeMap = {
    [P in keyof AttributeMapRaw]?: AttributeMapRaw[P];
};

/**
 * @public
 */
declare interface AttributeMapRaw {
    bold: boolean;
    italic: boolean;
    underline: boolean;
    code: boolean;
    link: string;
    list: "number" | "bullet";
    indent: number;
    header: 1 | 2 | 3 | 4 | 5 | 6;
    "code-block": boolean;
    linebreak: boolean;
    type: "main" | "important";
}

/**
 * @public
 */
declare interface BaseSuggestion {
    /**
     * A unique identifier for the suggestion.
     * @public
     */
    id: SuggestionId$1;
    /**
     * The category of suggestion.
     * @public
     */
    type: SuggestionType;
    /**
     * A human-readable label. Example: "Change your spelling"
     * @public
     */
    title: string;
    /**
     * Reasoning and detail behind the suggestion.
     * @public
     */
    description: Markup;
}

/**
 * Identifier used to authenticate with Grammarly.
 *
 * @public
 */
declare type ClientId = string;

/**
 * Configuration to customize the Grammarly integration. Used by `init()` and the `<Grammarly>` component in React and Vue integrations.
 *
 * @remarks
 * See {@link EditorConfig} to customize per editor instance.
 *
 * @public
 * @since v1.6.3
 */
declare type Config = Pick<EditorConfig, "documentDialect" | "documentDomain" | "introText" | "oauthRedirectUri" | "suggestionCategories" | "autocomplete" | "toneDetector" | "userFeedback">;

/**
 * Specific variety of English being written.
 *
 * @remarks
 *
 * In addition to `"american"`, `"australian"`, `"british"`, `"canadian"`, and `"indian"` English, you can set the following values:
 *
 * - `"auto-browser"`: Chooses an appropriate dialect based on the user's browser settings. This is the default value.
 *
 * - `"auto-text"`: Chooses an appropriate dialect based on the user's written text.
 *
 * Note that the user can override this setting in the Grammarly button menu.
 *
 * For more information, see {@link https://support.grammarly.com/hc/en-us/articles/115000089992-Select-between-British-English-American-English-Canadian-English-and-Australian-English | this article} for differences.
 *
 * Used by {@link Config} and {@link EditorConfig}.
 *
 * @public
 */
declare type Dialect = 
/** @since v1.3.0 */
"auto-browser" | "american" | "australian" | "british" | "canadian" | "indian"
/** @since v1.3.0 */
| "auto-text";

/**
 * Statistics about the user-entered text. {@link https://codesandbox.io/s/github/grammarly/grammarly-for-developers/tree/main/examples/editor-sdk-react-stats | Try it now}.
 *
 * @remarks
 * `DocumentStats` is available only on the Plus plan. {@link https://developer.grammarly.com/plans | Learn more} about our plans.
 *
 * @public
 * @since v1.9.0
 */
declare interface DocumentStats {
    /** Current number of characters, including whitespace. */
    charsCount: number;
    /** Current number of words. */
    wordsCount: number;
    /** Current number of suggestions. */
    suggestionsCount: number;
    /**
     * Readability score using the {@link https://en.wikipedia.org/wiki/Flesch%E2%80%93Kincaid_readability_tests#Flesch_reading_ease|Flesch reading-ease test}.
     *
     * Higher scores indicate material that is easier to read.
     * The range for typical text is 0â€“100, but we surface the exact score, even if lower or higher.
     * @remarks readabilityScore should only be used with longer texts.
     */
    readabilityScore: number;
    /** Expected time needed by an average reader to read the text (250 wpm). */
    readingTime: Time;
    /** Expected time needed by an average speaker to speak the text aloud (130 wpm). */
    speakingTime: Time;
}

/**
 * The style or type of writing to be analyzed.
 *
 * @remarks
 *
 * You can select the style of the document that best corresponds to the type of writing you're analyzing in order to get the most accurate and relevant suggestions:
 *
 *  - **`academic`:** Designed to analyze text against stricter, academic writing criteria.
 *
 *  - **`business`:** Designed to analyze text against formal writing criteria.
 *
 *  - **`general`:** Designed for a medium level of strictness. This is the default domain.
 *
 *  - **`mail`:** Designed to help ensure that your email communication is engaging.
 *
 *  - **`casual`:** Designed for informal types of writing and ignores most style issues.
 *
 *  - **`creative`:** Designed to intentionally bend grammar rules to achieve certain effects.
 *
 * For more information, see {@link https://support.grammarly.com/hc/en-us/articles/115000091472-What-is-domain-document-type- | What is domain/document type?}
 *
 * Used by {@link Config} and {@link EditorConfig}.
 *
 * @public
 */
declare type Domain = "academic" | "business" | "general" | "mail" | "casual" | "creative";

/**
 * Configuration to customize the Grammarly integration per `Editor` instance.
 *
 * @public
 */
declare interface EditorConfig {
    /**
     * Which English dialect should be assumed?
     *
     * @demo {@link https://codesandbox.io/s/github/grammarly/grammarly-for-developers/tree/main/examples/editor-sdk-document-dialect?file=/public/index.html | Try it now}
     * @defaultValue "auto-browser"
     * @since v1.6.3
     * @public
     */
    documentDialect?: Dialect;
    /**
     * What is the style or type of writing?
     *
     * @demo {@link https://codesandbox.io/s/github/grammarly/grammarly-for-developers/tree/main/examples/editor-sdk-document-domain?file=/public/index.html | Try it now}
     * @defaultValue "general"
     * @since v1.6.3
     * @public
     */
    documentDomain?: Domain;
    /**
     * Categories of suggestions that can be muted.
     *
     * @remarks Muting suggestion categories is available only on the Plus plan. {@link https://developer.grammarly.com/plans | Learn more} about our plans.
     * @demo {@link https://codesandbox.io/s/github/grammarly/grammarly-for-developers/tree/main/examples/editor-sdk-suggestions-config?file=/public/index.html | Try it now}
     * @public
     */
    suggestionCategories?: SuggestionCategories;
    /**
     * Collect user feedback after the user takes action on 5 suggestions.
     *
     * We will not request feedback more than once in a 30 day period.
     *
     * @remarks User feedback is required for the Free plan. {@link https://developer.grammarly.com/plans | Learn more} about our plans.
     * @defaultValue "on"
     * @public
     * @since v1.8.3
     */
    userFeedback?: "on" | "off";
    /**
     * Text shown to introduce first-time users to Grammarly.
     *
     * This introductory text shows in the footer of suggestion cards until the user first accepts
     * or dismisses a suggestion.
     *
     * @demo {@link https://codesandbox.io/s/github/grammarly/grammarly-for-developers/tree/main/examples/editor-sdk-intro-text?file=/public/index.html | Try it now}
     * @defaultValue "Grammarly helps you write clearly and mistake-free."
     * @since v1.6.3
     * @public
     */
    introText?: string;
    /**
     * Show the tone detector interface (beside the Grammarly button).
     *
     * Note that tone detection requires a text of at least 120 characters and will not activate if the text is over 2500 characters in length.
     *
     * @remarks Tone detector is available only on the Plus plan. {@link https://developer.grammarly.com/plans | Learn more} about our plans.
     * @defaultValue "off"
     * @public
     * @since v1.8.3
     */
    toneDetector?: "on" | "off";
    /**
     * Offer to complete phrases for your users as they type. {@link https://developer.grammarly.com/docs/autocomplete | Learn more}
     *
     * Autocomplete is not currently supported for `<input>` fields.
     *
     * If you have a Content Security Policy (CSP), you will need to update it as described
     * {@link https://developer.grammarly.com/docs/faq#how-do-i-add-grammarly-to-my-content-security-policy-csp | here}.
     *
     * @remarks Autocomplete is available only on the Plus plan. {@link https://developer.grammarly.com/plans | Learn more} about our plans.
     * @demo {@link https://codesandbox.io/s/github/grammarly/grammarly-for-developers/tree/main/examples/editor-sdk-autocomplete?file=/public/index.html | Try it now}
     * @defaultValue "off"
     * @public
     * @since v1.7.0
     */
    autocomplete?: "on" | "off";
    /**
     * URI to redirect to after successful account connection.
     *
     * @public
     * @since v1.6.3
     */
    oauthRedirectUri?: string;
    /**
     * OAuth assertion to verify ownership of the clientId.
     *
     * @public
     * @since v1.10.2
     */
    oauthAssertionProvider?: string | (() => Promise<{
        assertion: string;
    }>);
    /**
     * Show suggestion cards when a user hovers over a suggestion underline.
     *
     *
     * @defaultValue "on"
     * @public
     * @since v1.9.0
     */
    suggestionCards?: "on" | "off";
    /**
     * Show underlines for suggestions.
     *
     * @defaultValue "on"
     * @public
     * @since v1.9.2
     */
    underlines?: "on" | "off";
    /**
     * Activation strategy used by the Editor Plugin
     *
     * - focus: Plugin activates once the text field is focused
     *
     * - immediate: Plugin activates immediately
     *
     * @defaultValue "focus"
     * @public
     * @since v2.0.0
     */
    activation?: "focus" | "immediate";
}

/**
 * Custom event
 *
 * @public
 */
declare class Event_2<T> {
    /**
     * Event name
     *
     * @public
     */
    readonly type: string;
    /**
     * Event payload
     *
     * @public
     */
    readonly detail: T;
    constructor(name: string, detail: T);
}


/**
 * Emits events much like Node's {@link https://nodejs.org/docs/latest/api/events.html#events_class_eventemitter | EventEmitter}.
 *
 * @remarks
 * ```ts
 * editor.addEventListener("openOAuthUrl", event => {
 *   const url = event.detail
 *   // ...
 * })
 * ```
 * The variable `editor` is an instance of Editor which implements {@link EventEmitter} interface.
 *
 * @public
 */
declare class EventEmitter$1<T> implements Disposable {
    private _listeners;
    private readonly _onError;

    constructor(onError?: (_error: Error) => void);
    /**
     * Register a function to be called whenever a specified event is emitted.
     *
     * @public
     */
    addEventListener<E extends string & keyof T>(event: E, listener: EventListener_2<T[E]>): void;
    /**
     * Remove a previously added listener function.
     *
     * @public
     */
    removeEventListener<E extends string & keyof T>(event: E, listener: EventListener_2<T[E]>): void;


}

/**
 * Emits events much like Node's {@link https://nodejs.org/docs/latest/api/events.html#events_class_eventemitter | EventEmitter}.
 *
 * @remarks
 * ```ts
 * editor.addEventListener("openOAuthUrl", event => {
 *   const url = event.detail
 *   // ...
 * })
 * ```
 * The variable `editor` is an instance of Editor which implements {@link EventEmitter} interface.
 *
 * @public
 */
declare class EventEmitter<T> extends EventEmitter$1<T> {
    constructor();
}

/**
 * Event handler callback
 *
 * @public
 */
declare type EventListener_2<T> = (event: Event_2<T>) => void | Promise<void>;


/**
 * Initialize Grammarly and start using {@link SDK}.
 *
 * @param clientId - The {@link ClientId} for authentication
 * @param config - Shared global config
 *
 * @public
 */
declare function init(clientId: ClientId, config?: Config): Promise<SDK>;

/**
 * @public
 */
declare type InsertOperation<T extends string | Record<string, unknown> = string | Record<string, unknown>> = {
    /** Text to insert */
    insert: T;
    /** Metadata or semantics for the operation */
    attributes?: AttributeMap;
};

declare interface ITextRange {
    start: number;
    end: number;
}

/**
 * A list of {@link MarkupChild}.
 *
 * @public
 */
declare type Markup = MarkupChild[];

/**
 * Semantic markup like HTML but easier to parse and restricted to an allow list.
 *
 * @public
 */
declare type MarkupChild = string | {
    type: "strong" | "em" | "ul" | "li" | "del" | "ins";
    children: MarkupChild[];
};

/**
 * A semantic, incompatible type that improves type safety beyond `string`, for example.
 *
 * @public
 */
declare type Opaque<T, K> = T & {
    __opaqueType?: K;
};

/**
 * Rich text format for representing documents and changes (based on {@link https://quilljs.com/docs/delta/ | Quill's delta }).
 *
 * @public
 */
declare interface RichText {
    /** A list of {@link InsertOperation} representing a document or change. */
    ops: InsertOperation[];
}

/**
 * Metadata or semantics for an {@link InsertOperation}.
 *
 * @public
 */
declare type RichTextAttributes = AttributeMap;

/**
 * Establishes a connection with Grammarly and creates {@link Session}s for further interaction.
 *
 * @public
 */
declare class SDK extends EventEmitter<SDKEvents> {
    #private;

    /**
     * Checks if user has connected their Grammarly account to current application.
     *
     * @public
     * @since v1.7.4
     */
    get isUserAccountConnected(): boolean;
    /**
     * Analyze text with Grammarly.
     *
     * @param text - Text to be analyzed
     * @returns A {@link Session} for subsequent interactions
     */
    withText<T extends string | RichText>(text: T, config?: EditorConfig): Session<T>;
    /**
     * Process OAuth callback and complete account connection.
     *
     * @public
     * @since v1.7.3
     */
    handleOAuthCallback(url: string): Promise<void>;
    /**
     * Initiates OAuth consent flow and returns an URL which should be opened in the default browser.
     *
     * @public
     * @since v1.7.4
     */
    getOAuthUrl(oauthRedirectUri: string): Promise<string>;
    /**
     * Log out
     *
     * @public
     * @since v1.7.4
     */
    logout(): Promise<void>;
}

declare type SDKEvents = {
    isUserAccountConnected: boolean;
};

/**
 * A text checking session
 *
 * @remarks
 * Use `addEventListener` to subscribe to important events (see {@link SessionEvents}).
 *
 * @typeParam T - `string` for plain text or `RichText` for rich text
 *
 * @public
 */
declare class Session<T extends string | RichText> extends EventEmitter<SessionEvents> {
    #private;

    /**
     * Current list of suggestions.
     *
     * @public
     */
    get suggestions(): readonly Suggestion[];
    /**
     * Current status
     *
     * @public
     */
    get status(): SessionStatus;
    /**
     * Current document stats
     *
     * @public
     */
    get documentStats(): Readonly<DocumentStats>;
    /**
     * Current session stats
     *
     * @public
     */
    get sessionStats(): Readonly<SessionStats>;
    /**
     * Current editor configuration
     *
     * @public
     * @since v1.7.4
     */
    get config(): Readonly<EditorConfig>;
    /**
     * Update editor configuration by merging new configuration with current configuration.
     *
     * @remarks Setting a property to `undefined` would remove it, e.g., `setConfig({ documentDialect: undefined })` would remove configured dialect.
     *
     * @param config - new editor configuration
     * @public
     * @since v1.7.4
     */
    setConfig(config: EditorConfig): void;
    /**
     * Send text (as `string` or {@link RichText}) to Grammarly to be analyzed.
     *
     * @param text - the text to analyze
     * @param cursor - cursor position in text
     *
     * @public
     */
    setText(text: T, cursor?: number): void;
    /**
     * Apply ("accept") the provided suggestion.
     *
     * @remarks
     * After updating your editor with the replacement, be sure  call `setText` to synchronize remaining suggestions.
     *
     * @param options - The ids for the suggestion and, optionally, replacement to accept. If replacement is not specified, the first one is assumed.
     *
     * @public
     */
    applySuggestion(options: {
        suggestionId: SuggestionId;
        replacementId?: SuggestionReplacementId;
    }): Promise<{
        range: TextRange;
        content: T;
    }>;
    /**
     * Dismiss the provided suggestion.
     *
     * @public
     */
    dismissSuggestion(options: {
        suggestionId: SuggestionId;
    }): Promise<void>;
    /**
     * Add word from the provided suggestion to the user dictionary.
     *
     * @public
     */
    addToDictionary(options: {
        suggestionId: SuggestionId;
    }): Promise<void>;
    /**
     * Close websocket connection and clean up any state.
     * @public
     */
    disconnect(): Promise<void>;
}

/**
 * Events emitted by {@link Session}.
 * @public
 */
declare type SessionEvents = {
    /**
     * Emitted if an unexpected error occurred
     * @public
     */
    error: Error;
    /**
     * Emitted when Grammarly's status has changed
     *  - `connecting`: establishing a connection to Grammarly
     *  - `idle`: Grammarly is done checking the provided text (if any) and is waiting for more
     *  - `checking`: Grammarly is checking the provided text
     * @public
     * @since v1.7.3
     */
    status: SessionStatus;
    /**
     * Emitted when document statistics change
     * @public
     */
    "document-stats": Readonly<DocumentStats>;
    /**
     * Emitted when document statistics change
     * @public
     */
    "session-stats": Readonly<SessionStats>;
    /**
     * Emitted when Grammarly {@link Suggestion | suggestions} have changed
     *
     * @public
     * @since v1.7.3
     */
    suggestions: {
        added: Suggestion[];
        removed: Suggestion[];
        updated: Suggestion[];
    };
};

/**
 * Statistics about the Grammarly session.
 *
 * @remarks
 * `SessionStats` is available only on the Plus plan. {@link https://developer.grammarly.com/plans | Learn more} about our plans.
 *
 *  @public
 */
declare interface SessionStats {
    /** Duration of the editing session, in seconds. */
    duration: number;
    /**
     * Total words checked during the session.
     *
     * @deprecated NEXT_VERSION - use wordsAnalyzed instead
     */
    wordsChecked: number;
    /** Total words analyzed during the session. */
    wordsAnalyzed: number;
    /** Suggestions provided by Grammarly. */
    suggestionsSent: SessionSuggestionBreakdown;
    /** Suggestions accepted by user. */
    suggestionsAccepted: SessionSuggestionBreakdown;
}

/**
 * Status of
 *
 * @public
 */
declare type SessionStatus = "connecting" | "checking" | "idle" | "error";

/**
 * Suggestion total along with counts by type. {@link https://codesandbox.io/s/github/grammarly/grammarly-for-developers/tree/main/examples/editor-sdk-react-stats | Try it now}.
 *
 * @remarks
 * Within {@link SessionStats}, used by both `suggestionsAccepted` and `suggestionsSent`.
 *
 * @public
 */
declare interface SessionSuggestionBreakdown {
    /**
     *  The total number of suggestions delivered to your users across all the editors in your application.
     */
    total: number;
    /**
     *  The total number of suggestions delivered for the Correctness category.
     *  @remarks The Correctness category focuses on eliminating grammar, spelling, and punctuation mistakes, and ensuring word choices sound natural and fluent.
     */
    correctness: number;
    /**
     *  The total number of suggestions delivered for the Delivery category.
     *  @remarks The Delivery category focuses on helping end users find the right tone, eliminating hedging language (to sound more confident), and finessing phrases to have more tact and empathy for readers, and supporting respectful and current language practices.
     */
    delivery: number;
    /**
     *  The total number of suggestions delivered for the Clarity category.
     *  @remarks The Clarity category focuses on making every sentence concise and easy to follow, and rewriting hard-to-read sentences.
     */
    clarity: number;
    /**
     *  The total number of suggestions delivered for the Engagement category.
     *  @remarks The Engagement category focuses on choosing the most compelling words, and using varied, engaging sentence structure.
     */
    engagement: number;
}

/**
 * Suggested text improvement from Grammarly.
 *
 * @public
 */
declare interface Suggestion extends BaseSuggestion {
    /** Parts of the text that are relevant for the suggestion. */
    highlights: TextRange[];
    /** Suggested ways to address the suggestion. */
    replacements: SuggestionReplacement[];
    /** Can add word to dictionary? */
    canAddToDictionary: boolean;
}

/**
 * Categories of suggestions that can be muted.
 *
 * @remarks
 * Keep the following rules in mind when muting suggestion categories:
 *
 * - The following categories are turned `"off"` by default: `conjunctionAtStartOfSentence`, `informalPronounsAcademic`, `oxfordComma`, `passiveVoice`, `prepositionAtTheEndOfSentence`, `stylisticFragments`, and `unnecessaryEllipses`.
 *
 * - If a category is set to `"off"`, any suggestions belonging to that category will be muted (not visible to the user).
 *
 * - If a user has connected their Grammarly account to your application, the full set of customized suggestions from their user profile will always take precedence.
 *
 * - Muting suggestion categories is available only on the Plus plan. {@link https://developer.grammarly.com/plans | Learn more} about our plans.
 *
 * Used by {@link Config} and {@link EditorConfig}.
 *
 * @public
 */
declare interface SuggestionCategories {
    /**
     * Suggests alternatives to words that occur frequently in the same paragraph.
     *
     * @defaultValue "on"
     */
    variety?: "on" | "off";
    /**
     * Suggests alternatives to bland and overused words such as "good" and "nice".
     *
     * @defaultValue "on"
     */
    vocabulary?: "on" | "off";
    /**
     * Suggests ways to sound more natural and fluent.
     *
     * @defaultValue "on"
     */
    fluency?: "on" | "off";
    /**
     * Suggests adding the Oxford comma after the second-to-last item in a list of things.
     *
     * @defaultValue "off"
     */
    oxfordComma?: "on" | "off";
    /**
     * Flags unnecessary use of ellipses (...).
     *
     * @defaultValue "off"
     */
    unnecessaryEllipses?: "on" | "off";
    /**
     * Suggests placing punctuation before closing quotation marks.
     *
     * @defaultValue "on"
     */
    punctuationWithQuotation?: "on" | "off";
    /**
     * Suggests completing all incomplete sentences, including stylistic sentence fragments that may be intentional.
     *
     * @defaultValue "off"
     */
    stylisticFragments?: "on" | "off";
    /**
     * Flags use of personal pronouns such as "I" and "you" in academic writing.
     *
     * @defaultValue "off"
     */
    informalPronounsAcademic?: "on" | "off";
    /**
     * Flags use of conjunctions such as "but" and "and" at the beginning of sentences.
     *
     * @defaultValue "off"
     */
    conjunctionAtStartOfSentence?: "on" | "off";
    /**
     * Flags use of prepositions such as "with" and "in" at the end of sentences.
     *
     * @defaultValue "off"
     */
    prepositionAtTheEndOfSentence?: "on" | "off";
    /**
     * Suggests rewriting split infinitives so that an adverb doesn't come between "to" and the verb.
     *
     * @defaultValue "on"
     */
    splitInfinitive?: "on" | "off";
    /**
     * Suggests adding missing spacing after a numeral when writing times.
     *
     * @defaultValue "on"
     */
    missingSpaces?: "on" | "off";
    /**
     * Flags use of passive voice.
     *
     * @defaultValue "off"
     */
    passiveVoice?: "on" | "off";
    /**
     * Flags long, complicated sentences that could potentially confuse your reader.
     *
     * @defaultValue "on"
     */
    readabilityFillerWords?: "on" | "off";
    /**
     * Suggests splitting long, complicated sentences that could potentially confuse your reader.
     *
     * @defaultValue "on"
     */
    readabilityTransforms?: "on" | "off";
    /**
     * Suggests using person-first language to refer respectfully to an individual with a disability.
     *
     * @defaultValue "on"
     */
    personFirstLanguage?: "on" | "off";
    /**
     * Suggests alternatives to potentially gender-biased and non-inclusive phrasing.
     *
     * @defaultValue "on"
     */
    possiblyBiasedLanguageGenderRelated?: "on" | "off";
    /**
     * Flags LGBTQIA+-related terms that may be seen as biased, outdated, or disrespectful in some contexts.
     *
     * @defaultValue "on"
     */
    possiblyBiasedLanguageLGBTQIARelated?: "on" | "off";
    /**
     * Suggests alternatives to language that may be considered politically incorrect.
     *
     * @defaultValue "on"
     */
    possiblyPoliticallyIncorrectLanguage?: "on" | "off";
    /**
     * Suggests alternatives to potentially biased language related to race and ethnicity.
     *
     * @defaultValue "on"
     */
    possiblyBiasedLanguageRaceEthnicityRelated?: "on" | "off";
    /**
     * Suggests alternatives to potentially biased language related to older adults.
     *
     * @defaultValue "on"
     */
    possiblyBiasedLanguageAgeRelated?: "on" | "off";
    /**
     * Suggests alternatives to potentially ableist language.
     *
     * @defaultValue "on"
     */
    possiblyBiasedLanguageDisabilityRelated?: "on" | "off";
    /**
     * Suggests alternatives to potentially biased language related to parenting and family systems.
     *
     * @example
     * Quinn hoped to meet their \{ real father  =\> birth father \} one day.
     *
     * @defaultValue "on"
     */
    possiblyBiasedLanguageFamilyRelated?: "on" | "off";
    /**
     * Suggests spelling out numbers zero through ten.
     *
     * @defaultValue "on"
     */
    numbersZeroThroughTen?: "on" | "off";
    /**
     * Suggests spelling out numbers at the beginning of sentences.
     *
     * @defaultValue "on"
     */
    numbersBeginningSentences?: "on" | "off";
    /**
     * Flags a series of nouns that modify a final noun.
     *
     * @example
     * The \{store manager policy handbook update meeting \} is tomorrow.
     *
     * @defaultValue "on"
     */
    nounStrings?: "on" | "off";
    /**
     * Flags series of sentences that follow the same pattern.
     *
     * @example
     * I read an interesting book recently. It was about computers. I usually read novels.
     *
     * @defaultValue "on"
     */
    sentenceVariety?: "on" | "off";
    /**
     * Suggests removing extra spaces surrounding a slash.
     *
     * @example
     * I just wanted to send a \{ reminder / follow-up  =\> reminder/follow-up \}.
     *
     * @defaultValue "on"
     */
    spacesSurroundingSlash?: "on" | "off";
    /**
     * Suggests alternatives to language related to human slavery.
     *
     * @example
     * My professor wrote a book about \{ slaves  =\> enslaved people \} in America.
     *
     * @defaultValue "on"
     */
    possiblyBiasedLanguageHumanRights?: "on" | "off";
    /**
     * Suggests alternatives to terms with origins in the institution of slavery.
     *
     * @example
     * The apartmentâ€™s \{ master  =\> main|primary \} bedroom has a view of the sea.
     *
     * @defaultValue "on"
     */
    possiblyBiasedLanguageHumanRightsRelated?: "on" | "off";
}

/**
 * A unique identifier for a suggestion.
 *
 * @public
 */
declare type SuggestionId$1 = Opaque<string, "SuggestionId">;

/**
 * A unique identifier for a suggestion.
 *
 * @public
 */
declare type SuggestionId = SuggestionId$1;

/**
 * Details about a replacement suggested by Grammarly.
 *
 * @public
 */
declare interface SuggestionReplacement {
    id: SuggestionReplacementId;
    /**
     * UI-friendly label useful when there are multiple replacement options.
     */
    label?: string;
    /**
     * Replacement preview showing before and after states.
     *
     * @example
     * ~classical~ classic
     */
    preview: Markup;
}

/**
 * A unique identifier for a suggestion replacement.
 *
 * @public
 */
declare type SuggestionReplacementId = Opaque<number, "SuggestionReplacementId">;

/**
 * @public
 */
declare enum SuggestionType {
    ADVANCED = "advanced",
    AUTOCOMPLETE = "autocomplete",
    CORRECTIVE = "corrective",
    STYLEGUIDE = "styleguide"
}

/**
 * A range of text represented by start and end offsets.
 * Ranges are half open intervals [start, end), that means
 * end is not included.
 *
 * @public
 */
declare class TextRange implements ITextRange {
    /** Start offset of range (begins at 0). */
    readonly start: number;
    /** End offset of range. */
    readonly end: number;
    constructor(start: number, end: number);
    /** Stringify the range. */
    toString(): string;
    /** Check if two ranges are equal. */
    static equals(a: TextRange, b: TextRange): boolean;
    /**
     * Check if range `a` fully contains range `b`
     * @param endInclusive - if true, we consider the ranges as closed intervals [start, end]. This
     *                       can be useful when comparing highlight ranges with text ranges.
     * @returns
     */
    static contains(a: TextRange, b: TextRange, endInclusive?: boolean): boolean;
}

/**
 * Time in hours, minutes, and seconds.
 *
 * @remarks
 * Within {@link DocumentStats}, used by both `readingTime` and `speakingTime`.
 *
 * @public
 *
 */
declare interface Time {
    /** Hours */
    h: number;
    /** Minutes */
    m: number;
    /** Seconds */
    s: number;
}

export { AttributeMap, BaseSuggestion, ClientId, Config, Dialect, DocumentStats, EditorConfig, Event_2 as Event, EventEmitter, EventListener_2 as EventListener, InsertOperation, Markup, MarkupChild, Opaque, RichText, RichTextAttributes, SDK, Session, SessionEvents, SessionStats, SessionStatus, Suggestion, SuggestionCategories, SuggestionId, SuggestionReplacement, SuggestionReplacementId, SuggestionType, TextRange, init };
